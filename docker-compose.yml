# path: docker-compose.yml
version: '3.9'

services:
  # Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: hotel-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - CADDY_DOMAIN=${CADDY_DOMAIN:-localhost}
      - CADDY_EMAIL=${CADDY_EMAIL:-admin@hotel-ai.com}
    depends_on:
      - app
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hotel-app
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WHISPER_SERVICE_URL=${WHISPER_SERVICE_URL}
      - COQUI_SERVICE_URL=${COQUI_SERVICE_URL}
      - OFFLOAD_HEAVY=${OFFLOAD_HEAVY:-0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-hotel_ai}
      - POSTGRES_USER=${POSTGRES_USER:-hotel_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGTZ=${APP_TIMEZONE:-Asia/Almaty}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hotel_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotel-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Whisper Speech-to-Text Stub
  whisper-stub:
    build:
      context: ./stubs/whisper
      dockerfile: Dockerfile
    container_name: hotel-whisper-stub
    ports:
      - "8000:8000"
    networks:
      - hotel-network
    restart: unless-stopped
    profiles:
      - ${OFFLOAD_HEAVY:-0}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Coqui Text-to-Speech Stub
  coqui-stub:
    build:
      context: ./stubs/coqui
      dockerfile: Dockerfile
    container_name: hotel-coqui-stub
    ports:
      - "8001:8001"
    networks:
      - hotel-network
    restart: unless-stopped
    profiles:
      - ${OFFLOAD_HEAVY:-0}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - hotel-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hotel-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - hotel-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - tempo

  # Loki
  loki:
    image: grafana/loki:latest
    container_name: hotel-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - hotel-network
    restart: unless-stopped

  # Tempo
  tempo:
    image: grafana/tempo:latest
    container_name: hotel-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"
      - "4317:4317"
    networks:
      - hotel-network
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: hotel-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
    networks:
      - hotel-network
    restart: unless-stopped
    depends_on:
      - tempo

networks:
  hotel-network:
    driver: bridge

volumes:
  pgdata:
  redis_data:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data: